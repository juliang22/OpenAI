package com.appian.openai.templates.apis;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.appian.connectedsystems.simplified.sdk.SimpleIntegrationTemplate;
import com.appian.connectedsystems.simplified.sdk.configuration.SimpleConfiguration;
import com.appian.connectedsystems.templateframework.sdk.ExecutionContext;
import com.appian.connectedsystems.templateframework.sdk.IntegrationError;
import com.appian.connectedsystems.templateframework.sdk.IntegrationResponse;
import com.appian.connectedsystems.templateframework.sdk.TemplateId;
import com.appian.connectedsystems.templateframework.sdk.configuration.PropertyPath;
import com.appian.connectedsystems.templateframework.sdk.metadata.IntegrationTemplateRequestPolicy;
import com.appian.connectedsystems.templateframework.sdk.metadata.IntegrationTemplateType;
import com.appian.openai.templates.Execution.Execute;
import com.appian.openai.templates.UI.OpenAIUIBuilder;

import std.ConstantKeys;
import std.HTTP;

@TemplateId(name = "OpenAIIntegrationTemplate")
@IntegrationTemplateType(IntegrationTemplateRequestPolicy.READ_AND_WRITE)
public class OpenAIIntegrationTemplate extends SimpleIntegrationTemplate implements ConstantKeys {

  OpenAIUIBuilder restBuilder = new OpenAIUIBuilder(this, OPENAI);

  @Override
  protected SimpleConfiguration getConfiguration(
      SimpleConfiguration integrationConfiguration,
      SimpleConfiguration connectedSystemConfiguration,
      PropertyPath propertyPath,
      ExecutionContext executionContext) {

    try {
      HTTP.testAuth(connectedSystemConfiguration);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }

    restBuilder.setIntegrationConfiguration(integrationConfiguration);
    return integrationConfiguration.setProperties(restBuilder.build());
  }

  @Override
  protected IntegrationResponse execute(
      SimpleConfiguration integrationConfiguration,
      SimpleConfiguration connectedSystemConfiguration,
      ExecutionContext executionContext) {

    Execute execute = new Execute(integrationConfiguration, connectedSystemConfiguration);
    try {
      execute.build();
    } catch (IOException e) {
      return IntegrationResponse.forError(new IntegrationError.IntegrationErrorBuilder()
              .title(e.getCause().toString())
              .message(e.getMessage())
              .build())
          .build();
    }

    // If autogenerated 'text' property is submitted, create error
    if (execute.getError() != null) {
      IntegrationError error = execute.getError().build();
      return IntegrationResponse.forError(error).build();
    }

    return IntegrationResponse.forSuccess(
        execute.getResponse()).withDiagnostic(execute.getDiagnosticsUI())
    .build();
  }
}
